# Stage 1: The 'build' stage
# This stage uses the full .NET SDK image to build the application.
# It is a temporary stage and will not be part of the final image.
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copy the .csproj file and restore dependencies.
# This step is cached by Docker, speeding up subsequent builds if dependencies haven't changed.
COPY ["Library.csproj", "."]
RUN dotnet restore "Library.csproj"

# Copy the remaining source code.
COPY ../Library.Domain ./Library.Domain
COPY ../Library.Services ./Library.Services
COPY ../Library.Repository ./Library.Repository
COPY . .
WORKDIR "/src"

# Build the application in Release mode.
RUN dotnet build "Library.csproj" -c Release -o /app/build

# Stage 2: The 'publish' stage
# This stage is for publishing the application, making it ready to run.
FROM build AS publish
RUN dotnet publish "Library.csproj" -c Release -o /app/publish /p:UseAppHost=false

# Stage 3: The 'final' stage
# This is the final, production-ready image.
# It uses a lightweight ASP.NET Core runtime image.
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS final
WORKDIR /app

# Copy the published application from the 'publish' stage into the final image.
COPY --from=publish /app/publish .

# Expose the port that the ASP.NET Core application listens on.
# ASP.NET Core 9.0 typically defaults to port 8080 in containers.
EXPOSE 8080

# The entry point command to start the application when the container is run.
# It points to the compiled DLL of your Web API.
ENTRYPOINT ["dotnet", "Library.dll"]

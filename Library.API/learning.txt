docker run --name sql_server_container -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=rahul@123" -p 1433:1433 -d mcr.microsoft.com/azure-sql-edge:latestdotnet --list-runtimes

1. How to install root certificate in database and use it for connection in code.
2. Path vs Query Parameter

Topic to complete
-------------------------------------
Logger          -------- start this-----------SERILOG----------DATADOG-----------------
Authentication  
-- ASP .NET CORE identity for Razor pages
-- Token based , Best for APIs and SPAs like angular 
    -- dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
    -- Add JwtBearer configuration in program.cs // this is to Authorize the token 
    -- expose and API to create token
Authorization
    -- Add [Authorize] for ApiController and .RequireAuthorization for the minimal endpoint.
    -- check the expiry of the token
    -- check the user id 
    -- Add custome middleware to validate the token and check the principal
Exception handling
Token Management
    -- Refresh token
OAuth
fluent api 
LINQ
stored procedure
entity framework
app.UseMiddleWare<>(); // app.UseAuthentication(); app.UseAuthorization(); are middleware added in program.cs



REDIS 
SYSTEM Design
Microservices Architecture
Docker Image creation == tough
CI/CD Pipeline

Cache the API request response

Load Balancer and it's algorithms. 
Casandra DB speciality

Docker 
Kubernetes 

2. Middleware
You've already been using middleware without maybe realizing it (like app.UseRouting() or app.UseHttpsRedirection()). Understanding it fully is essential for building custom logic into the request pipeline.
What it is: Middleware is a component that sits in an application's request pipeline to handle requests and responses. It's a key part of how ASP.NET Core processes HTTP traffic.
Custom Middleware: You should learn how to create your own middleware to handle cross-cutting concerns like logging requests, handling exceptions, or performing custom authentication logic.

Asynchronous Programming



Cloud topics
---------------------------------
Cloud, DevOps, and Infrastructure
Containerization and Orchestration: Master Docker for containerizing applications and Kubernetes for orchestrating them at scale. Understand concepts like Helm charts for deployment and managing secrets.

Serverless Architecture: Learn to build event-driven backend services using Azure Functions or AWS Lambda. Understand the trade-offs and best practices for serverless.

Infrastructure as Code (IaC): Gain experience with tools like Terraform or Bicep to define and manage cloud infrastructure programmatically.

CI/CD Pipeline Mastery: Go beyond simple build/deploy steps. Focus on building robust pipelines that include automated testing, security scanning, and blue/green or canary deployments.

Advance
-----------------------------
.NET Internals: Understand how the Garbage Collector (GC), Just-In-Time (JIT) compiler, and runtime host work. This knowledge is invaluable for advanced debugging and performance tuning.
Customization of ASP.NET Core: Develop custom middleware, filters, and endpoint conventions to extend the ASP.NET Core pipeline in sophisticated ways.



Complex problems:
--------------------------
1. Find the most popular book(s): 
This operation involves joining Book with a table that tracks checkouts or loans. You'd group the results by BookID and count the number of checkouts to find the book with the highest count.

SQL

SELECT B.Title, B.ISBN, COUNT(L.LoanID) AS NumberOfLoans
FROM Books AS B
JOIN Loans AS L ON B.BookID = L.BookID
GROUP BY B.BookID
ORDER BY NumberOfLoans DESC
LIMIT 5;

2. Identify overdue books and the members who have them: 
This requires joining Book with Loan and Member tables. The condition would check if the loan's return date is null and if the due date is in the past.

SQL

SELECT M.MemberName, B.Title, L.DueDate
FROM Loans AS L
JOIN Members AS M ON L.MemberID = M.MemberID
JOIN Books AS B ON L.BookID = B.BookID
WHERE L.ReturnDate IS NULL AND L.DueDate < CURRENT_DATE;

3. Find authors who have not published a book in the last five years: 
This involves using a subquery or a LEFT JOIN. You'd find all authors, then filter out the ones whose most recent book was published within the last five years.

SQL

SELECT A.AuthorName
FROM Authors AS A
WHERE A.AuthorID NOT IN (
    SELECT B.AuthorID
    FROM Books AS B
    WHERE B.PublicationYear >= YEAR(CURRENT_DATE) - 5
);

4. Find members who have read books from more than one genre: 
This involves joining Member, Loan, and Book tables, then grouping by MemberID and counting the distinct genres they've borrowed.

SQL

SELECT M.MemberName, COUNT(DISTINCT B.Genre) AS NumberOfGenres
FROM Members AS M
JOIN Loans AS L ON M.MemberID = L.MemberID
JOIN Books AS B ON L.BookID = B.BookID
GROUP BY M.MemberID
HAVING COUNT(DISTINCT B.Genre) > 1;